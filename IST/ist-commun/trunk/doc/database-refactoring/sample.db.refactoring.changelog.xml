<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">
    <preConditions>
        <or>
            <dbms type="oracle" />
        </or>
    </preConditions>
    <!-- The original table is named PERSON (id, name, gender_code, birth_date) -->

    <!-- With the construction of the new table we mark the id as deprecate-<old-table-name> 
        in order to be able to check the execution date of the changeset with this 
        id and decide when to drop the old table. -->
    <changeSet author="gmigkos" id="deprecate-person">
        <createTable tableName="PERSON_NEW">
            <column name="ID" type="NUMBER">
                <constraints nullable="false" />
            </column>
            <column name="FIRST_NAME" type="VARCHAR2(20 CHAR)" />
            <column name="LAST_NAME" type="VARCHAR2(20 CHAR)" />
            <column name="GENDER_CODE" type="VARCHAR2(1 CHAR)" />
            <column name="BIRTH_DATE" type="DATE" />
        </createTable>
    </changeSet>

    <!-- Transfering and transforming the values to the newly created table -->

    <changeSet id="2" author="gmigkos">
        <sql>
            insert into person_new (id, first_name,
            last_name,gender_code,birth_date) SELECT id, substr(name, 1,
            (instr(name, ' '))-1), substr(name, (instr(name, ' '))+1),
            gender_code,birth_date FROM person;
        </sql>
    </changeSet>

    <!-- Synchronizing the two tables (PERSON and PERSON_NEW) -->

    <changeSet id="3" author="gmigkos">
        <sql endDelimiter="\nGO" splitStatements="true" stripComments="true">
            create or replace
            TRIGGER PERSON_TRIGGER
            AFTER
            INSERT OR
            UPDATE OR
            DELETE
            ON PERSON
            FOR EACH ROW
            BEGIN
            CASE
            WHEN INSERTING THEN
            insert into person_new (ID, first_name, last_name, GENDER_CODE, BIRTH_DATE)
            VALUES (:new.ID,(substr(:new.name, 1, (instr(:new.name, ' '))-1)),
            (substr(:new.name, (instr(:new.name, ' '))+1)), :new.GENDER_CODE,
            :new.BIRTH_DATE);
            WHEN UPDATING THEN
            update person_new set first_name=substr(:new.name, 1,
            (instr(:new.name, ' '))-1), last_name=substr(:new.name,
            (instr(:new.name, ' '))+1), gender_code=:new.gender_code,
            birth_date=:new.birth_date where id = :old.id;
            WHEN DELETING THEN
            delete from person_new where id=:old.id;
            END CASE;
            END;
        </sql>
    </changeSet>

    <!-- Checking if it is time to drop the old table (Transition period passed) -->

    <changeSet id="4" author="gmigkos">
        <preConditions onFail="CONTINUE">
            <sqlCheck expectedResult="1">select case when limit > 60 then 1
                else 0 end as "Limit" from (select sysdate - TO_DATE
                (TO_CHAR(DATEEXECUTED,'YYYY-MON-DD HH24:MI:SS'), 'YYYY-MON-DD
                HH24:MI:SS') as limit from databasechangelog where id =
                'deprecate-person');
            </sqlCheck>
        </preConditions>
        <sql>drop trigger PERSON_TRIGGER;</sql>
        <dropTable tableName="PERSON" />
    </changeSet>
</databaseChangeLog>
